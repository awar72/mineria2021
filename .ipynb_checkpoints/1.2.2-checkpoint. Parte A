{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4  5  6  7  8  9\n",
       "0  1  1  3  7  2  9  4  5  2  3\n",
       "1  2  3  4  3  7  7  2  9  8  4\n",
       "2  3  7  4  1  2  4  5  5  1  2\n",
       "3  3  3  4  5  7  9  8  7  5  3\n",
       "4  2  2  1  3  5  6  6  2  1  3"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load Data\n",
    "\n",
    "df_hijos = pd.read_csv('1.2.2 Estadistica Descriptiva - Parte A.csv', sep=';', header=None)\n",
    "df_hijos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 10 columns):\n",
      " #   Column  Non-Null Count  Dtype\n",
      "---  ------  --------------  -----\n",
      " 0   0       5 non-null      int64\n",
      " 1   1       5 non-null      int64\n",
      " 2   2       5 non-null      int64\n",
      " 3   3       5 non-null      int64\n",
      " 4   4       5 non-null      int64\n",
      " 5   5       5 non-null      int64\n",
      " 6   6       5 non-null      int64\n",
      " 7   7       5 non-null      int64\n",
      " 8   8       5 non-null      int64\n",
      " 9   9       5 non-null      int64\n",
      "dtypes: int64(10)\n",
      "memory usage: 528.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df_hijos.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_hijos.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_hijos.axes[1])  #Con axes[0] se devulven las filas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 1,\n",
       " 3,\n",
       " 7,\n",
       " 2,\n",
       " 9,\n",
       " 4,\n",
       " 5,\n",
       " 2,\n",
       " 3,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 3,\n",
       " 7,\n",
       " 7,\n",
       " 2,\n",
       " 9,\n",
       " 8,\n",
       " 4,\n",
       " 3,\n",
       " 7,\n",
       " 4,\n",
       " 1,\n",
       " 2,\n",
       " 4,\n",
       " 5,\n",
       " 5,\n",
       " 1,\n",
       " 2,\n",
       " 3,\n",
       " 3,\n",
       " 4,\n",
       " 5,\n",
       " 7,\n",
       " 9,\n",
       " 8,\n",
       " 7,\n",
       " 5,\n",
       " 3,\n",
       " 2,\n",
       " 2,\n",
       " 1,\n",
       " 3,\n",
       " 5,\n",
       " 6,\n",
       " 6,\n",
       " 2,\n",
       " 1,\n",
       " 3]"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista = []\n",
    "for i in range(0,len(df_hijos.index)):\n",
    "    for j in range(0,len(df_hijos.axes[1])):\n",
    "            lista.append(df_hijos.iloc[i,j])\n",
    "lista"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lista)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_hijos=pd.DataFrame({'Hijos':lista})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hijos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Hijos\n",
       "0       1\n",
       "1       1\n",
       "2       3\n",
       "3       7\n",
       "4       2\n",
       "5       9\n",
       "6       4\n",
       "7       5\n",
       "8       2\n",
       "9       3\n",
       "10      2\n",
       "11      3\n",
       "12      4\n",
       "13      3\n",
       "14      7\n",
       "15      7\n",
       "16      2\n",
       "17      9\n",
       "18      8\n",
       "19      4\n",
       "20      3\n",
       "21      7\n",
       "22      4\n",
       "23      1\n",
       "24      2\n",
       "25      4\n",
       "26      5\n",
       "27      5\n",
       "28      1\n",
       "29      2\n",
       "30      3\n",
       "31      3\n",
       "32      4\n",
       "33      5\n",
       "34      7\n",
       "35      9\n",
       "36      8\n",
       "37      7\n",
       "38      5\n",
       "39      3\n",
       "40      2\n",
       "41      2\n",
       "42      1\n",
       "43      3\n",
       "44      5\n",
       "45      6\n",
       "46      6\n",
       "47      2\n",
       "48      1\n",
       "49      3"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_hijos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hijos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.366863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Hijos\n",
       "count  50.000000\n",
       "mean    4.100000\n",
       "std     2.366863\n",
       "min     1.000000\n",
       "25%     2.000000\n",
       "50%     3.500000\n",
       "75%     5.750000\n",
       "max     9.000000"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_hijos.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "col_0  frecuencia\n",
      "Hijos            \n",
      "1               6\n",
      "2               9\n",
      "3              10\n",
      "4               6\n",
      "5               6\n",
      "6               2\n",
      "7               6\n",
      "8               2\n",
      "9               3\n"
     ]
    }
   ],
   "source": [
    "# Generar tabla de frecuencias\n",
    "tab = pd.crosstab(index=df_hijos[\"Hijos\"],columns=\"frecuencia\")\n",
    "print(tab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>frecuencia</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hijos</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0  frecuencia\n",
       "Hijos            \n",
       "1               6\n",
       "2               9\n",
       "3              10\n",
       "4               6\n",
       "5               6\n",
       "6               2\n",
       "7               6\n",
       "8               2\n",
       "9               3"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>frecuencia</th>\n",
       "      <th>Freq Rel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hijos</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0  frecuencia  Freq Rel\n",
       "Hijos                      \n",
       "1               6      12.0\n",
       "2               9      18.0\n",
       "3              10      20.0\n",
       "4               6      12.0\n",
       "5               6      12.0\n",
       "6               2       4.0\n",
       "7               6      12.0\n",
       "8               2       4.0\n",
       "9               3       6.0"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tab[\"Freq Rel\"]= tab[\"frecuencia\"]/len(df_hijos)*100\n",
    "tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12.0, 30.0, 50.0, 62.0, 74.0, 78.0, 90.0, 94.0, 100.0]\n"
     ]
    }
   ],
   "source": [
    "Acum = []\n",
    "valores = tab[\"Freq Rel\"].values\n",
    "valor_acum = 0\n",
    "for i in valores:\n",
    "    valor_acum = valor_acum + i\n",
    "    Acum.append(valor_acum)\n",
    "print(Acum)\n",
    "tab[\"Freq Acum\"] = Acum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hijos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Hijos\n",
       "3     10\n",
       "2      9\n",
       "7      6\n",
       "5      6\n",
       "4      6\n",
       "1      6\n",
       "9      3\n",
       "8      2\n",
       "6      2"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq = df_hijos['Hijos'].value_counts()\n",
    "df_freq=freq.to_frame()\n",
    "df_freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Hijos'], dtype='object')"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_freq.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frecuencia')"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datos= df_hijos['Hijos']\n",
    "\n",
    "intervalos = range(min(datos), max(datos) + 2) #calculamos los extremos de los intervalos\n",
    "\n",
    "plt.hist(x=datos, bins=intervalos, color='#F2AB6D', rwidth=0.85)\n",
    "plt.title('Histograma de Hijos')\n",
    "plt.xlabel('Hijos')\n",
    "plt.ylabel('Frecuencia')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
